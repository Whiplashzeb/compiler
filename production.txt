start => MAIN LR_BRAC RR_BRAC compound_statement;
statement => compound_statement;
statement => expression SEMIC;
statement => if_statement;
statement => while_statement;
statement => for_statement;
statement => declaration;
statement => out_statement;
while_statement => WHILE LR_BRAC expression RR_BRAC statement;
for_statement => FOR LR_BRAC expression SEMIC expression SEMIC expression RR_BRAC statement;
if_statement => IF LR_BRAC expression RR_BRAC  statement;
if_statement => IF LR_BRAC expression RR_BRAC  statement ELSE statement;
compound_statement => LB_BRAC block_item_list RB_BRAC;
block_item_list => statement;
block_item_list => block_item_list statement;
primary_expression => ID;
primary_expression => ID LS_BRAC expression RS_BRAC;
postfix_expression => primary_expression;
postfix_expression => LR_BRAC expression RR_BRAC;
postfix_expression => DIG;
postfix_expression => primary_expression PLUSPLUS;
postfix_expression => primary_expression MINUSMINUS;
multiplication_expression => postfix_expression;
multiplication_expression => multiplication_expression MULTI postfix_expression;
multiplication_expression => multiplication_expression DIV postfix_expression;
additive_expression => multiplication_expression;
additive_expression => additive_expression PLUS multiplication_expression;
additive_expression => additive_expression MINUS multiplication_expression;
relational_expression => additive_expression;
relational_expression => relational_expression LT additive_expression;
relational_expression => relational_expression RT additive_expression;
relational_expression => relational_expression LQ additive_expression;
relational_expression => relational_expression RQ additive_expression;
relational_expression => relational_expression EQEQ additive_expression;
relational_expression => relational_expression NEQ additive_expression;
logical_AND_expression => relational_expression;
logical_AND_expression => logical_AND_expression AND relational_expression;
logical_OR_expression => logical_AND_expression;
logical_OR_expression => logical_OR_expression OR logical_AND_expression;
expression => assignment_expression;
expression => expression COMMA assignment_expression;
assignment_expression => primary_expression EQ assignment_expression;
assignment_expression => logical_OR_expression;
string_literal => DQ_MARKS STR DQ_MARKS;
out_statement => PRINT LR_BRAC string_literal out_paralist RR_BRAC SEMIC;
out_statement => PRINT LR_BRAC string_literal RR_BRAC SEMIC;
out_paralist => COMMA additive_expression;
out_paralist => out_paralist COMMA additive_expression;
declaration => INT init_declarator_list SEMIC;
init_declarator => ID;
init_declarator => ID EQ DIG;
init_declarator => ID LS_BRAC DIG RS_BRAC EQ array_initializer;
init_declarator_list => init_declarator;
init_declarator_list => init_declarator_list COMMA init_declarator;
array_initializer => LB_BRAC initializer_list RB_BRAC;
initializer_list => DIG;
initializer_list => initializer_list COMMA DIG;